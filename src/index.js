const fetch = require('cross-fetch');

const generateParseDate = (  ) =>  "/Date(" + Date.parse( new Date(  ) ) + ")/";

const updateTestCaseTestRun =  async ( inputDate ) => {
    const endpointGetTestSteps = "https://alm-itac.spiraservice.net/services/v5_0/RestService.svc/projects/" + inputDate.idProject +"/test-cases/" + inputDate.idTestCase + 
    "/test-steps?username=" + inputDate.user.username + "&api-key=" + inputDate.user.apiKey + "";
    const responseBodyTestSteps =  await fetch( endpointGetTestSteps, {
        method: "GET",
        headers: {
            "Content-Type": "application/json"
        }
    });
    return responseBodyTestSteps.json(  );
};

function callFunctionUpdateTestRun( stateTest, inputDate ) {
    try {
        if( !inputDate.idProject ) {
            throw { state: 400, message: "El parámetro idProject es requerido."};
        } else if ( !inputDate.idRelease ) {
            throw { state: 400, message: "El parámetro idRelease es requerido."};
        } else if ( !inputDate.idTestCase ) {
            throw { state: 400, message: "El parámetro idTestCase es requerido."};
        } else if ( !inputDate.idTestSet ) {
            throw { state: 400, message: "El parámetro idTestSet es requerido."};
        } else if ( inputDate.testFallido === undefined ) {
            throw { state: 400, message: "El parámetro testFallido es requerido."};
        } else if ( stateTest === undefined || stateTest !== "failed" || stateTest !== "passed" ) {
            throw { state: 400, message: "El parámetro stateTest es requerido." }
        } else {
            updateTestCaseTestRun( inputDate ).then( async ( arraySteps ) => {
                arraySteps[0].ConcurrencyDate = generateParseDate(  );
                arraySteps[0].LastUpdateDate = generateParseDate(  );
                ( stateTest === "failed" ) ? arraySteps[0].ExecutionStatusId = 1 : arraySteps[0].ExecutionStatusId = 2;
                const endpointUpdateTestRun = "https://alm-itac.spiraservice.net/services/v5_0/RestService.svc/projects/37/test-runs?end_date=&username=" + inputDate.user.username + 
                "&api-key=" + inputDate.user.apiKey + "";
                console.log( await fetch( endpointUpdateTestRun, {
                    method: "PUT",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify( [{
                        "ArtifactTypeId": 5,
                        "ConcurrencyDate": generateParseDate(  ),
                        "CustomProperties": [],
                        "IsAttachments": false,
                        "ProjectId": inputDate.idProject,
                        "ActualDuration": 0,
                        "BuildId": null,
                        "EndDate": generateParseDate(  ),
                        "EstimatedDuration": null,
                        "ExecutionStatusId": ( stateTest === "failed" ) ? 1 : 2,
                        "Name": "Test run generated by Cypress",
                        "ReleaseId": inputDate.idRelease,
                        "StartDate": generateParseDate(  ),
                        "TestCaseId": inputDate.idTestCase,
                        "TestRunTypeId": 1,
                        "TestSetId": inputDate.idTestSet,
                        "TestSetTestCaseId": null,
                        "TesterId": 25,
                        "TestRunSteps": arraySteps
                    } ])
                } ))
            } );
        }
        return { state: 200, message: "Correcto."}
    } catch( error ) {
        console.log( "Error: " + error.message );
        return error;
    }
}

module.exports = callFunctionUpdateTestRun